# This flake was initially generated by fh, the CLI for FlakeHub (version 0.1.10)
{
  description = "flake-iter";

  inputs = {
    nixpkgs.url = "https://flakehub.com/f/NixOS/nixpkgs/*.tar.gz";
    rust-overlay = {
      url = "github:oxalica/rust-overlay";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    flake-compat.url = "https://flakehub.com/f/edolstra/flake-compat/*.tar.gz";
    flake-schemas.url = "https://flakehub.com/f/DeterminateSystems/flake-schemas/*.tar.gz";
  };

  outputs = { self, flake-compat, flake-schemas, nixpkgs, rust-overlay }:
    let
      overlays = [
        rust-overlay.overlays.default
        self.overlays.default
      ];
      supportedSystems = [ "x86_64-linux" "aarch64-darwin" "x86_64-darwin" "aarch64-linux" ];
      forEachSupportedSystem = f: nixpkgs.lib.genAttrs supportedSystems (system: f {
        pkgs = import nixpkgs { inherit overlays system; };
      });
      meta = (builtins.fromTOML (builtins.readFile ./Cargo.toml)).package;
    in
    {
      inherit (flake-schemas) schemas;

      overlays.default = final: prev: {
        rustToolchain = final.rust-bin.stable.latest.default.override {
          extensions = [ "rust-src" ];
        };
      };

      devShells = forEachSupportedSystem ({ pkgs }: rec {
        default = pkgs.mkShell {
          packages = with pkgs; [
            rustToolchain
            cargo-edit
            bacon
            rust-analyzer
            nixpkgs-fmt
          ];

          env = {
            RUST_SRC_PATH = "${pkgs.rustToolchain}/lib/rustlib/src/rust/library";
          };
        };

        a = default;
        b = default;
        c = default;
        d = default;
      });

      # These outputs are solely for local testing
      packages = forEachSupportedSystem ({ pkgs }: {
        default =
          let
            rustPlatform = pkgs.makeRustPlatform {
              cargo = pkgs.rustToolchain;
              rustc = pkgs.rustToolchain;
            };
          in
          rustPlatform.buildRustPackage {
            pname = meta.name;
            inherit (meta) version;
            src = ./.;
            cargoLock.lockFile = ./Cargo.lock;
          };
      });
    };
}
